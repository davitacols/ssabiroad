// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  username       String          @unique
  name           String
  password       String
  profileImage   String?  
  coverImage     String?  
  bio            String?  
  role           String          @default("user")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Relation fields
  detections     Detection[]
  savedLocations SavedLocation[]
  buildings      Building[]      // New relation to buildings they've analyzed
}

model Building {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Basic building info
  name           String?
  description    String?
  address        String?
  latitude       Float?
  longitude      Float?
  confidence     Float?
  type           String    // detection type (text-detection, landmark, visual-detection, etc.)
  
  // Building features
  architecture   String[]
  materials      String[]
  style          String[]
  condition      String?
  
  // Image properties
  dominantColors String[]
  brightness     Float?
  contrast       Float?
  safetyScore    Float?
  
  // Relations
  similarBuildings BuildingSimilarity[] @relation("SimilarTo")
  similarTo       BuildingSimilarity[] @relation("SimilarFrom")
  images          BuildingImage[]
  detections      Detection[]          // Link to detections
  
  // User who first discovered/analyzed the building
  userId          String
  user            User     @relation(fields: [userId], references: [id])
}

model Detection {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  buildingName  String?
  description   String?
  address       String?
  confidence    Float
  latitude      Float?
  longitude     Float?
  architecture  String[]
  materials     String[]
  styles        String[]
  imageUrl      String?
  
  // Relation to User and Building
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  buildingId    String?
  building      Building? @relation(fields: [buildingId], references: [id])
}

model SavedLocation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  address   String
  latitude  Float
  longitude Float
  visits    Int      @default(0)
  
  // Relation to User
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BuildingImage {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  buildingId  String
  imageUrl    String
  building    Building @relation(fields: [buildingId], references: [id])
}

model BuildingSimilarity {
  id            String   @id @default(uuid())
  buildingId    String
  similarToId   String
  similarity    Float
  building      Building @relation("SimilarTo", fields: [buildingId], references: [id])
  similarTo     Building @relation("SimilarFrom", fields: [similarToId], references: [id])

  @@unique([buildingId, similarToId])
}
"use client"

import { useState, useEffect } from "react"
import { MapPin, Share2, Camera, X, Sparkles } from "lucide-react"
import { motion } from "framer-motion"
import { Button } from "@/components/ui/button"
import { BusinessInfoDisplay } from "@/components/enhanced-business-display"

export default function MobileDashboard() {
  const [location, setLocation] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    // Check if we have a processing job in localStorage
    const jobId = localStorage.getItem("currentLocationJobId")

    if (jobId) {
      // Set initial processing state
      setLocation({
        success: true,
        name: "Processing your image...",
        type: "processing",
        description: "We're analyzing your image to identify the location.",
      })

      // Poll for job status
      const checkJobStatus = async () => {
        try {
          const formData = new FormData()
          formData.append("operation", "checkStatus")
          formData.append("jobId", jobId)

          const response = await fetch("/api/location-recognition", {
            method: "POST",
            body: formData,
          })

          const data = await response.json()

          if (data.status === "completed" || (data.success === true && !data.status)) {
            setLocation(data)
            setIsLoading(false)
            // Clear the job ID from localStorage once complete
            localStorage.removeItem("currentLocationJobId")
          } else if (data.status === "failed" || data.success === false) {
            setError(data.error || "Analysis failed")
            setIsLoading(false)
            localStorage.removeItem("currentLocationJobId")
          } else {
            // Update the processing message based on progress
            if (data.status === "processing") {
              setLocation((prev) => ({
                ...prev,
                name: "Detecting features...",
                description: "Identifying landmarks, businesses, and other points of interest.",
              }))
            }
          }
        } catch (error) {
          console.error("Error checking job status:", error)
        }
      }

      // Check immediately and then every 2 seconds
      checkJobStatus()
      const interval = setInterval(checkJobStatus, 2000)

      return () => clearInterval(interval)
    } else {
      // Try to get the most recent location from localStorage
      const savedLocation = localStorage.getItem("lastLocation")

      if (savedLocation) {
        try {
          setLocation(JSON.parse(savedLocation))
        } catch (e) {
          console.error("Error parsing saved location:", e)
        }
      } else {
        // Set a default processing state if no saved location
        setLocation({
          success: true,
          name: "Ready to analyze",
          type: "initial",
          description: "Capture or upload an image to identify a location.",
        })
      }

      setIsLoading(false)
    }
  }, [])

  const handleStartOver = () => {
    // Clear any job in progress
    localStorage.removeItem("currentLocationJobId")

    // Redirect to the location analyzer page
    window.location.href = "/location-analyzer"
  }

  // Show loading state while fetching data
  if (isLoading && !location) {
    return (
      <div className="flex flex-col min-h-screen bg-slate-900 text-white">
        <header className="bg-indigo-900/50 p-4 flex items-center">
          <div className="w-10 h-10 rounded-full bg-indigo-800/50 flex items-center justify-center mr-3">
            <Sparkles className="h-5 w-5 text-indigo-300" />
          </div>
          <h1 className="text-xl font-bold">Pic2Nav</h1>
        </header>

        <div className="flex-1 flex flex-col items-center justify-center p-6">
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
          >
            <Sparkles className="h-10 w-10 text-indigo-400 mb-4" />
          </motion.div>
          <h2 className="text-xl font-medium mb-2">Loading location data...</h2>
          <p className="text-slate-400 text-center">Please wait while we retrieve your location information.</p>
        </div>
      </div>
    )
  }

  // Show error state
  if (error) {
    return (
      <div className="flex flex-col min-h-screen bg-slate-900 text-white">
        <header className="bg-indigo-900/50 p-4 flex items-center">
          <div className="w-10 h-10 rounded-full bg-indigo-800/50 flex items-center justify-center mr-3">
            <MapPin className="h-5 w-5 text-indigo-300" />
          </div>
          <h1 className="text-xl font-bold">Pic2Nav</h1>
        </header>

        <div className="flex-1 flex flex-col items-center justify-center p-6">
          <div className="w-16 h-16 rounded-full bg-red-900/20 flex items-center justify-center mb-4">
            <X className="h-8 w-8 text-red-500" />
          </div>
          <h2 className="text-xl font-medium mb-2">Something went wrong</h2>
          <p className="text-slate-400 text-center mb-6">{error}</p>
          <Button onClick={handleStartOver}>Try Again</Button>
        </div>
      </div>
    )
  }

  // Determine what to display in the header
  const displayName =
    location?.type === "processing"
      ? location.name
      : location?.name && location.name !== "Unknown Location"
        ? location.name
        : "Location Details"

  return (
    <div className="flex flex-col min-h-screen bg-slate-900 text-white">
      <header className="bg-indigo-900/50 p-4 flex items-center">
        <div className="w-10 h-10 rounded-full bg-indigo-800/50 flex items-center justify-center mr-3">
          <MapPin className="h-5 w-5 text-indigo-300" />
        </div>
        <h1 className="text-xl font-bold">Pic2Nav</h1>
      </header>

      <div className="p-4">
        <div className="bg-slate-800/50 rounded-xl p-4 flex items-center">
          <div className="w-12 h-12 rounded-full bg-slate-700/50 flex items-center justify-center mr-3">
            <MapPin className="h-6 w-6 text-indigo-400" />
          </div>
          <div>
            <h2 className="text-lg font-semibold">{displayName}</h2>
            {location?.type === "processing" ? (
              <div className="w-full mt-2">
                <div className="h-1.5 bg-slate-700 rounded-full overflow-hidden">
                  <motion.div
                    initial={{ width: "10%" }}
                    animate={{ width: "90%" }}
                    transition={{ duration: 15, ease: "linear" }}
                    className="h-full bg-gradient-to-r from-indigo-500 to-purple-500"
                  />
                </div>
                <p className="text-sm text-slate-400 mt-1">{location.description}</p>
              </div>
            ) : location?.location ? (
              <p className="text-sm text-slate-400">
                {location.location.latitude.toFixed(6)}, {location.location.longitude.toFixed(6)}
              </p>
            ) : null}
          </div>
        </div>
      </div>

      <div className="flex-1 p-4">
        {location?.type === "processing" ? (
          <div className="bg-slate-800/30 rounded-xl p-6 flex flex-col items-center justify-center">
            <motion.div
              animate={{ rotate: 360 }}
              transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}
              className="mb-4"
            >
              <Sparkles className="h-8 w-8 text-indigo-400" />
            </motion.div>
            <p className="text-center text-slate-400">{location.description}</p>
          </div>
        ) : (
          <BusinessInfoDisplay recognitionResult={location} />
        )}
      </div>

      <div className="p-4">
        <Button
          variant="outline"
          className="w-full flex items-center justify-center gap-2 bg-slate-800 border-slate-700 text-white"
          onClick={() => {
            if (location && location.success && location.type !== "processing") {
              // Implement share functionality
              if (navigator.share) {
                navigator
                  .share({
                    title: location.name || "Shared Location",
                    text: `Check out this location: ${location.name}`,
                    url: location.mapUrl || window.location.href,
                  })
                  .catch((err) => console.error("Error sharing:", err))
              }
            }
          }}
        >
          <Share2 className="h-5 w-5" />
          Share
        </Button>
      </div>

      <div className="p-4 pt-0">
        <Button
          variant="default"
          className="w-full flex items-center justify-center gap-2 bg-slate-800"
          onClick={handleStartOver}
        >
          <X className="h-5 w-5" />
          Start Over
        </Button>
      </div>

      <nav className="grid grid-cols-5 bg-slate-800/90 backdrop-blur-md border-t border-slate-700/50">
        <button className="p-3 flex flex-col items-center justify-center">
          <Camera className="h-6 w-6 text-indigo-400" />
          <span className="text-xs mt-1 text-slate-400">Camera</span>
        </button>
        <button className="p-3 flex flex-col items-center justify-center">
          <MapPin className="h-6 w-6 text-slate-500" />
          <span className="text-xs mt-1 text-slate-400">Places</span>
        </button>
        <button className="p-3 flex flex-col items-center justify-center">
          <svg className="h-6 w-6 text-slate-500" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M9 20L3 17V4L9 7M9 20L15 17M9 20V7M15 17L21 20V7L15 4M15 17V4M9 7L15 4"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
          <span className="text-xs mt-1 text-slate-400">Map</span>
        </button>
        <button className="p-3 flex flex-col items-center justify-center">
          <svg className="h-6 w-6 text-slate-500" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M21 21L15 15M17 10C17 13.866 13.866 17 10 17C6.13401 17 3 13.866 3 10C3 6.13401 6.13401 3 10 3C13.866 3 17 6.13401 17 10Z"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
          <span className="text-xs mt-1 text-slate-400">Search</span>
        </button>
        <button className="p-3 flex flex-col items-center justify-center">
          <svg className="h-6 w-6 text-slate-500" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path
              d="M19.5 12.5719L12 19.9999L4.5 12.5719C3.33087 11.429 2.55962 9.93686 2.32138 8.32201C2.08313 6.70715 2.39077 5.05959 3.19545 3.63573C4.00013 2.21186 5.25608 1.09085 6.75 0.453626C8.24392 -0.183593 9.88831 -0.310836 11.4608 0.0932045C13.0334 0.497245 14.4527 1.40063 15.4732 2.6705C16.4938 3.94037 17.0568 5.49608 17.0568 7.09985C17.0568 8.70361 16.4938 10.2593 15.4732 11.5292L19.5 12.5719ZM19.5 12.5719C19.5 12.5719 19.5 12.572 19.5 12.572L19.5 12.5719Z"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            />
          </svg>
          <span className="text-xs mt-1 text-slate-400">Saved</span>
        </button>
      </nav>
    </div>
  )
}

